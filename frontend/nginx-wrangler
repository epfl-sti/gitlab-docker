#!/usr/bin/perl -w

# Keep nginx in check; SIGHUP it whenever the backend set changes

use strict;
use POSIX ":sys_wait_h";

use lib "/assets";
use FauxTemplate;

our ($config_template) = @ARGV;

sub interpolated_config {
  local *CONFIG_TMPL;
  open(CONFIG_TMPL, "<", $config_template) or die "open($config_template): $!";
  return interpolate(<CONFIG_TMPL>);
}

sub configure_nginx {
  my ($config) = @_;
  local *CONFIG;
  open(CONFIG, ">", "/etc/nginx/nginx.conf.NEW.$$")
    or die "Unable to open /etc/nginx/nginx.conf.NEW.$$ for writing: $!";
  do { (print CONFIG $config) && (close CONFIG) }
    or die "Unable to close /etc/nginx/nginx.conf.NEW.$$: $!";
  rename("/etc/nginx/nginx.conf.NEW.$$", "/etc/nginx/nginx.conf")
    or die "Unable to rename /etc/nginx/nginx.conf.NEW.$$ to /etc/nginx/nginx.conf: $!";
}

sub watch_nginx {
  configure_nginx(my $config = interpolated_config);
  exec("nginx", "-g", "daemon off;") unless my $pid = fork();
  warn "nginx started\n";

  while(sleep 5) {
    if ( 0 != waitpid($pid, WNOHANG) ) {
      die "nginx exited with " .
        ( ($? & 127)
          ? "signal $?"
          : "exit code " . ($? >> 8)
        );
    }
    next if $config eq (my $newconfig = interpolated_config);
    warn "Configuration changed - Restarting nginx\n";
    $config = $newconfig;
    configure_nginx($config);
    kill HUP => $pid;
  }
}

watch_nginx(); die "watch_nginx should not return";
