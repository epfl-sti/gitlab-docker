# docker-compose.yml to use with Docker swarm (*not* docker-compose,
# except for building images)
#
# To deploy changes, type
#
# docker deploy --compose-file docker-compose.yml gitlabdocker
#
# Careful: changes will be effected in real time and might cause a
# temporary outage, depending on what exactly the changes are!!
version: "3.3"
services:
  gitlabprod:
    image: epflsti/gitlab-docker:10.0.5
    hostname: gitlab
    environment:
      - ENVIRONMENT=prod
    volumes:
      # Keep this list in sync with service gitlabstaging
      - "/srv/gitlab/secrets/ssh/ssh_host_dsa_key:/etc/gitlab/ssh_host_dsa_key:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_dsa_key.pub:/etc/gitlab/ssh_host_dsa_key.pub:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_key:/etc/gitlab/ssh_host_key:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_key.pub:/etc/gitlab/ssh_host_key.pub:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_ecdsa_key:/etc/gitlab/ssh_host_ecdsa_key:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_ecdsa_key.pub:/etc/gitlab/ssh_host_ecdsa_key.pub:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_ed25519_key:/etc/gitlab/ssh_host_ed25519_key:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_ed25519_key.pub:/etc/gitlab/ssh_host_ed25519_key.pub:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_rsa_key:/etc/gitlab/ssh_host_rsa_key:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_rsa_key.pub:/etc/gitlab/ssh_host_rsa_key.pub:ro"
      - "/srv/gitlab/secrets/gitlab-secrets.json:/etc/gitlab/gitlab-secrets.json"
      - "./gitlab-main/gitlab.rb:/etc/gitlab/gitlab.rb"
      - "/srv/gitlab/backup:/var/opt/gitlab/backups"
      - "/srv/gitlab/data/git-data:/var/opt/gitlab/git-data"
      - "/srv/gitlab/data/ssh_user_public_keys:/var/opt/gitlab/.ssh"
      - "/srv/gitlab/data/shared:/var/opt/gitlab/gitlab-rails/shared"
      - "/srv/gitlab/data/uploads:/var/opt/gitlab/gitlab-rails/uploads"
      - "/srv/gitlab/data/gitlab-ci/builds:/var/opt/gitlab/gitlab-ci/builds"
      # Below this line, things are different between gitlabprod and gitlabstaging
      - "/srv/gitlab/run/redis-socket:/var/opt/gitlab/redis"
      - "/srv/gitlab/run/postgres-socket:/var/opt/gitlab/postgresql"
    deploy:
      replicas: 2   # Allow rolling upgrades
  gitlabstaging:
    image: epflsti/gitlab-docker:10.0.5
    build: gitlab-main
    hostname: gitlab
    environment:
      - ENVIRONMENT=staging
    volumes:
      # It follows from https://stackoverflow.com/a/30683699/435004 that there
      # is no avoiding duplicating this list (since we want to tweak the end of it
      # between staging and production).
      - "/srv/gitlab/secrets/ssh/ssh_host_dsa_key:/etc/gitlab/ssh_host_dsa_key:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_dsa_key.pub:/etc/gitlab/ssh_host_dsa_key.pub:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_key:/etc/gitlab/ssh_host_key:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_key.pub:/etc/gitlab/ssh_host_key.pub:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_ecdsa_key:/etc/gitlab/ssh_host_ecdsa_key:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_ecdsa_key.pub:/etc/gitlab/ssh_host_ecdsa_key.pub:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_ed25519_key:/etc/gitlab/ssh_host_ed25519_key:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_ed25519_key.pub:/etc/gitlab/ssh_host_ed25519_key.pub:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_rsa_key:/etc/gitlab/ssh_host_rsa_key:ro"
      - "/srv/gitlab/secrets/ssh/ssh_host_rsa_key.pub:/etc/gitlab/ssh_host_rsa_key.pub:ro"
      - "/srv/gitlab/secrets/gitlab-secrets.json:/etc/gitlab/gitlab-secrets.json"
      - "./gitlab-main/gitlab.rb:/etc/gitlab/gitlab.rb"
      - "/srv/gitlab/backup:/var/opt/gitlab/backups"
      - "/srv/gitlab/data/git-data:/var/opt/gitlab/git-data"
      - "/srv/gitlab/data/ssh_user_public_keys:/var/opt/gitlab/.ssh"
      - "/srv/gitlab/data/shared:/var/opt/gitlab/gitlab-rails/shared"
      - "/srv/gitlab/data/uploads:/var/opt/gitlab/gitlab-rails/uploads"
      - "/srv/gitlab/data/gitlab-ci/builds:/var/opt/gitlab/gitlab-ci/builds"
      # Below this line, things are different between gitlabprod and gitlabstaging
      - "/srv/gitlab/run/redis-socket:/var/opt/gitlab/redis"
      - "/srv/gitlab/run/postgres-socket-staging:/var/opt/gitlab/postgresql"
  postgresql_prod:
    image: postgres:9.6
    volumes:
      - "/srv/gitlab/postgresql/data:/var/lib/postgresql/data"
      - "/srv/gitlab/logs/postgresql:/var/log"
      - "/srv/gitlab/run/postgres-socket/:/run/postgresql/"
      - "/srv/gitlab/config/postgresql/passwd:/etc/passwd:ro"
  # The staging database is *not* persistent on purpose. Instead,
  # it restores from latest backup every time one restarts it.
  # To access it, do:
  # docker exec -it $(docker ps -q -f name=gitlabdocker_postgresql_staging) psql -U postgres gitlabhq_production
  postgresql_staging:
    image: postgres:9.6
    volumes:
      # As per https://hub.docker.com/_/postgres/, restore these files
      # at startup.
      - "./staging/00-create-db.sql:/docker-entrypoint-initdb.d/00-create-db.sql:ro"
      - "/srv/gitlab/backup/postgresql_dump.sql:/docker-entrypoint-initdb.d/10-postgresql_dump.sql:ro"
      - "/srv/gitlab/run/postgres-socket-staging/:/run/postgresql/"
      - "/srv/gitlab/config/postgresql/passwd:/etc/passwd:ro"
  redis:
    image: redis:latest
    volumes:
      - "/srv/gitlab/config/redis:/usr/local/etc/redis"
      - "/srv/gitlab/run/redis-socket:/run/redis"
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
  frontend: &service_frontend_prod
    image: nginx
    volumes:
      - "/srv/gitlab/ssl:/etc/ssl"
      - "./frontend:/assets"
      - "./frontend/nginx.conf.tt:/etc/nginx/nginx.conf.tt:ro"
    ports:
      - "443:443"
      - "22:22"
    environment:
      - ENVIRONMENT=prod
    command: /assets/nginx-wrangler /etc/nginx/nginx.conf.tt
  frontend_staging:
    <<: *service_frontend_prod
    environment:
       - ENVIRONMENT=staging
    ports:
      - "444:443"
      - "23:22"
    ## If you want to test changes to nginx.conf.tt, uncomment the next
    ## four lines:
    # volumes:
    #   - "/srv/gitlab/ssl:/etc/ssl"
    #   - "./frontend:/assets"
    #   - "./frontend/nginx.conf.DEV.tt:/etc/nginx/nginx.conf.tt:ro"
    ## Then copy nginx.conf.tt to nginx.conf.DEV.tt, and apply the
    ## changes using the "docker deploy" command at the top of this
    ## file.
  redirect:
    image: quay.io/coreos/nginx-https-redirect
    ports:
      - "80:80"
  plantuml:
    image: webvariants/plantuml-server
